#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ludus.LinqModels
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Ludus-db")]
	public partial class LudusDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertAssignment(Assignment instance);
    partial void UpdateAssignment(Assignment instance);
    partial void DeleteAssignment(Assignment instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertEnrollment(Enrollment instance);
    partial void UpdateEnrollment(Enrollment instance);
    partial void DeleteEnrollment(Enrollment instance);
    partial void InsertSection(Section instance);
    partial void UpdateSection(Section instance);
    partial void DeleteSection(Section instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertSubmission(Submission instance);
    partial void UpdateSubmission(Submission instance);
    partial void DeleteSubmission(Submission instance);
    partial void InsertPersonalItem(PersonalItem instance);
    partial void UpdatePersonalItem(PersonalItem instance);
    partial void DeletePersonalItem(PersonalItem instance);
    #endregion
		
		public LudusDataContext() : 
				base(global::Models.Properties.Settings.Default.Ludus_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LudusDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LudusDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LudusDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LudusDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Faculty> Faculties
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<Assignment> Assignments
		{
			get
			{
				return this.GetTable<Assignment>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Enrollment> Enrollments
		{
			get
			{
				return this.GetTable<Enrollment>();
			}
		}
		
		public System.Data.Linq.Table<Section> Sections
		{
			get
			{
				return this.GetTable<Section>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Submission> Submissions
		{
			get
			{
				return this.GetTable<Submission>();
			}
		}
		
		public System.Data.Linq.Table<PersonalItem> PersonalItems
		{
			get
			{
				return this.GetTable<PersonalItem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _DisplayName;
		
		private string _EMailAddress;
		
		private string _InstitutionUserId;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Faculty> _Faculties;
		
		private EntitySet<PersonalItem> _PersonalItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnEMailAddressChanging(string value);
    partial void OnEMailAddressChanged();
    partial void OnInstitutionUserIdChanging(string value);
    partial void OnInstitutionUserIdChanged();
    #endregion
		
		public UserProfile()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Faculties = new EntitySet<Faculty>(new Action<Faculty>(this.attach_Faculties), new Action<Faculty>(this.detach_Faculties));
			this._PersonalItems = new EntitySet<PersonalItem>(new Action<PersonalItem>(this.attach_PersonalItems), new Action<PersonalItem>(this.detach_PersonalItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMailAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EMailAddress
		{
			get
			{
				return this._EMailAddress;
			}
			set
			{
				if ((this._EMailAddress != value))
				{
					this.OnEMailAddressChanging(value);
					this.SendPropertyChanging();
					this._EMailAddress = value;
					this.SendPropertyChanged("EMailAddress");
					this.OnEMailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstitutionUserId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InstitutionUserId
		{
			get
			{
				return this._InstitutionUserId;
			}
			set
			{
				if ((this._InstitutionUserId != value))
				{
					this.OnInstitutionUserIdChanging(value);
					this.SendPropertyChanging();
					this._InstitutionUserId = value;
					this.SendPropertyChanged("InstitutionUserId");
					this.OnInstitutionUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Student", Storage="_Students", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Faculty", Storage="_Faculties", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Faculty> Faculties
		{
			get
			{
				return this._Faculties;
			}
			set
			{
				this._Faculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_PersonalItem", Storage="_PersonalItems", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<PersonalItem> PersonalItems
		{
			get
			{
				return this._PersonalItems;
			}
			set
			{
				this._PersonalItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_PersonalItems(PersonalItem entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_PersonalItems(PersonalItem entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _SessionId;
		
		private EntitySet<Enrollment> _Enrollments;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    #endregion
		
		public Student()
		{
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			this._UserProfile = default(EntityRef<UserProfile>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Enrollment", Storage="_Enrollments", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Student", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Student", Storage="_Session", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _SessionId;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    #endregion
		
		public Faculty()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Faculty", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Faculties.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Faculties.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Faculty", Storage="_Session", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Faculties.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Faculties.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assignment")]
	public partial class Assignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SectionId;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _Due;
		
		private int _SubmissionLimit;
		
		private int _MaximumGrade;
		
		private bool _Active;
		
		private EntitySet<Submission> _Submissions;
		
		private EntityRef<Section> _Section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDueChanging(System.Nullable<System.DateTime> value);
    partial void OnDueChanged();
    partial void OnSubmissionLimitChanging(int value);
    partial void OnSubmissionLimitChanged();
    partial void OnMaximumGradeChanging(int value);
    partial void OnMaximumGradeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Assignment()
		{
			this._Submissions = new EntitySet<Submission>(new Action<Submission>(this.attach_Submissions), new Action<Submission>(this.detach_Submissions));
			this._Section = default(EntityRef<Section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Due", DbType="DateTime")]
		public System.Nullable<System.DateTime> Due
		{
			get
			{
				return this._Due;
			}
			set
			{
				if ((this._Due != value))
				{
					this.OnDueChanging(value);
					this.SendPropertyChanging();
					this._Due = value;
					this.SendPropertyChanged("Due");
					this.OnDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionLimit", DbType="Int NOT NULL")]
		public int SubmissionLimit
		{
			get
			{
				return this._SubmissionLimit;
			}
			set
			{
				if ((this._SubmissionLimit != value))
				{
					this.OnSubmissionLimitChanging(value);
					this.SendPropertyChanging();
					this._SubmissionLimit = value;
					this.SendPropertyChanged("SubmissionLimit");
					this.OnSubmissionLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumGrade", DbType="Int NOT NULL")]
		public int MaximumGrade
		{
			get
			{
				return this._MaximumGrade;
			}
			set
			{
				if ((this._MaximumGrade != value))
				{
					this.OnMaximumGradeChanging(value);
					this.SendPropertyChanging();
					this._MaximumGrade = value;
					this.SendPropertyChanged("MaximumGrade");
					this.OnMaximumGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Submission", Storage="_Submissions", ThisKey="Id", OtherKey="AssignmentId")]
		public EntitySet<Submission> Submissions
		{
			get
			{
				return this._Submissions;
			}
			set
			{
				this._Submissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Assignment", Storage="_Section", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._SectionId = value.Id;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Assignment = this;
		}
		
		private void detach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Assignment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Number;
		
		private string _Name;
		
		private bool _Active;
		
		private EntitySet<Section> _Sections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Course()
		{
			this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(10)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(80)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Section", Storage="_Sections", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<Section> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enrollment")]
	public partial class Enrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StudentId;
		
		private int _SectionId;
		
		private int _Grade;
		
		private bool _Active;
		
		private EntitySet<Submission> _Submissions;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Section> _Section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnGradeChanging(int value);
    partial void OnGradeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Enrollment()
		{
			this._Submissions = new EntitySet<Submission>(new Action<Submission>(this.attach_Submissions), new Action<Submission>(this.detach_Submissions));
			this._Student = default(EntityRef<Student>);
			this._Section = default(EntityRef<Section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int NOT NULL")]
		public int Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enrollment_Submission", Storage="_Submissions", ThisKey="Id", OtherKey="EnrollmentId")]
		public EntitySet<Submission> Submissions
		{
			get
			{
				return this._Submissions;
			}
			set
			{
				this._Submissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Enrollment", Storage="_Student", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Enrollment", Storage="_Section", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._SectionId = value.Id;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Enrollment = this;
		}
		
		private void detach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Enrollment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Section")]
	public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SessionId;
		
		private int _CourseId;
		
		private string _Number;
		
		private int _Limit;
		
		private string _Description;
		
		private EntitySet<Assignment> _Assignments;
		
		private EntitySet<Enrollment> _Enrollments;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnLimitChanging(int value);
    partial void OnLimitChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Section()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			this._Course = default(EntityRef<Course>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Limit", DbType="Int NOT NULL")]
		public int Limit
		{
			get
			{
				return this._Limit;
			}
			set
			{
				if ((this._Limit != value))
				{
					this.OnLimitChanging(value);
					this.SendPropertyChanging();
					this._Limit = value;
					this.SendPropertyChanged("Limit");
					this.OnLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Assignment", Storage="_Assignments", ThisKey="Id", OtherKey="SectionId")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Enrollment", Storage="_Enrollments", ThisKey="Id", OtherKey="SectionId")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Section", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Section", Storage="_Session", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private bool _Active;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Faculty> _Faculties;
		
		private EntitySet<Section> _Sections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Session()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Faculties = new EntitySet<Faculty>(new Action<Faculty>(this.attach_Faculties), new Action<Faculty>(this.detach_Faculties));
			this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Student", Storage="_Students", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Faculty", Storage="_Faculties", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<Faculty> Faculties
		{
			get
			{
				return this._Faculties;
			}
			set
			{
				this._Faculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Section", Storage="_Sections", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<Section> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Submission")]
	public partial class Submission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EnrollmentId;
		
		private int _AssignmentId;
		
		private int _Grade;
		
		private string _SubmitterComments;
		
		private string _ScorerComments;
		
		private System.Nullable<System.DateTime> _SubmissionDate;
		
		private EntityRef<Assignment> _Assignment;
		
		private EntityRef<Enrollment> _Enrollment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEnrollmentIdChanging(int value);
    partial void OnEnrollmentIdChanged();
    partial void OnAssignmentIdChanging(int value);
    partial void OnAssignmentIdChanged();
    partial void OnGradeChanging(int value);
    partial void OnGradeChanged();
    partial void OnSubmitterCommentsChanging(string value);
    partial void OnSubmitterCommentsChanged();
    partial void OnScorerCommentsChanging(string value);
    partial void OnScorerCommentsChanged();
    partial void OnSubmissionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmissionDateChanged();
    #endregion
		
		public Submission()
		{
			this._Assignment = default(EntityRef<Assignment>);
			this._Enrollment = default(EntityRef<Enrollment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollmentId", DbType="Int NOT NULL")]
		public int EnrollmentId
		{
			get
			{
				return this._EnrollmentId;
			}
			set
			{
				if ((this._EnrollmentId != value))
				{
					if (this._Enrollment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollmentIdChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentId = value;
					this.SendPropertyChanged("EnrollmentId");
					this.OnEnrollmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentId", DbType="Int NOT NULL")]
		public int AssignmentId
		{
			get
			{
				return this._AssignmentId;
			}
			set
			{
				if ((this._AssignmentId != value))
				{
					if (this._Assignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignmentIdChanging(value);
					this.SendPropertyChanging();
					this._AssignmentId = value;
					this.SendPropertyChanged("AssignmentId");
					this.OnAssignmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int NOT NULL")]
		public int Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitterComments", DbType="NVarChar(MAX)")]
		public string SubmitterComments
		{
			get
			{
				return this._SubmitterComments;
			}
			set
			{
				if ((this._SubmitterComments != value))
				{
					this.OnSubmitterCommentsChanging(value);
					this.SendPropertyChanging();
					this._SubmitterComments = value;
					this.SendPropertyChanged("SubmitterComments");
					this.OnSubmitterCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScorerComments", DbType="NVarChar(MAX)")]
		public string ScorerComments
		{
			get
			{
				return this._ScorerComments;
			}
			set
			{
				if ((this._ScorerComments != value))
				{
					this.OnScorerCommentsChanging(value);
					this.SendPropertyChanging();
					this._ScorerComments = value;
					this.SendPropertyChanged("ScorerComments");
					this.OnScorerCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubmissionDate
		{
			get
			{
				return this._SubmissionDate;
			}
			set
			{
				if ((this._SubmissionDate != value))
				{
					this.OnSubmissionDateChanging(value);
					this.SendPropertyChanging();
					this._SubmissionDate = value;
					this.SendPropertyChanged("SubmissionDate");
					this.OnSubmissionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Submission", Storage="_Assignment", ThisKey="AssignmentId", OtherKey="Id", IsForeignKey=true)]
		public Assignment Assignment
		{
			get
			{
				return this._Assignment.Entity;
			}
			set
			{
				Assignment previousValue = this._Assignment.Entity;
				if (((previousValue != value) 
							|| (this._Assignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assignment.Entity = null;
						previousValue.Submissions.Remove(this);
					}
					this._Assignment.Entity = value;
					if ((value != null))
					{
						value.Submissions.Add(this);
						this._AssignmentId = value.Id;
					}
					else
					{
						this._AssignmentId = default(int);
					}
					this.SendPropertyChanged("Assignment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enrollment_Submission", Storage="_Enrollment", ThisKey="EnrollmentId", OtherKey="Id", IsForeignKey=true)]
		public Enrollment Enrollment
		{
			get
			{
				return this._Enrollment.Entity;
			}
			set
			{
				Enrollment previousValue = this._Enrollment.Entity;
				if (((previousValue != value) 
							|| (this._Enrollment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enrollment.Entity = null;
						previousValue.Submissions.Remove(this);
					}
					this._Enrollment.Entity = value;
					if ((value != null))
					{
						value.Submissions.Add(this);
						this._EnrollmentId = value.Id;
					}
					else
					{
						this._EnrollmentId = default(int);
					}
					this.SendPropertyChanged("Enrollment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonalItem")]
	public partial class PersonalItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private System.DateTime _Start;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<bool> _AllDay;
		
		private string _ShortDescription;
		
		private string _Description;
		
		private bool _Complete;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnAllDayChanging(System.Nullable<bool> value);
    partial void OnAllDayChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCompleteChanging(bool value);
    partial void OnCompleteChanged();
    #endregion
		
		public PersonalItem()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="DateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllDay", DbType="Bit")]
		public System.Nullable<bool> AllDay
		{
			get
			{
				return this._AllDay;
			}
			set
			{
				if ((this._AllDay != value))
				{
					this.OnAllDayChanging(value);
					this.SendPropertyChanging();
					this._AllDay = value;
					this.SendPropertyChanged("AllDay");
					this.OnAllDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complete", DbType="Bit NOT NULL")]
		public bool Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_PersonalItem", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.PersonalItems.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.PersonalItems.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
